global path_definitions,creature_def,genotype_def,creaturesgroup_def,genotypegroup_def;
global mechpart_def, mechjoint_def, part_def, joint_def, neuro_def, neuroimpl_def, event_def;
global curr_def, curr_collection, curr_parent;
global g_file, g_files, g_needfiles, g_filesready_fun;
global g_tmp;
global g_usebranched, g_userequestid, g_usefile;

function init()
{
  mechpart_def = ["", "MechPart", null, null];
  mechjoint_def = ["", "MechJoint", null, null];
  part_def = ["", "Part", null, null];
  joint_def = ["", "Joint", null, null];
  neuro_def = ["", "NeuroDef", null, null];
  neuroimpl_def = ["", "Neuro", null, null];
  event_def = ["", "Event", null, null];

  creature_def =
    ["", "Creature", null,
     [["parts", "Model Parts", "l Part", "",
       function creatureparts_count, function creature_get_part, part_def],
      ["joints", "Model Joints", "l Joint", "",
       function creaturejoints_count, function creature_get_joint, joint_def],
      ["neurodefs", "Neuron Definitions", "l NeuroDef", "",
       function creatureneurons_count, function creature_get_neuro, neuro_def],
      ["mechparts", "Simulated Parts", "l MechPart", "",
       function creaturemechparts_count, function creature_get_mechpart, mechpart_def],
      ["mechjoints", "Simulated Joints", "l MechJoint", "",
       function creaturemechjoints_count, function creature_get_mechjoint, mechjoint_def],
      ["neurons", "Live Neurons", "l Neuro", "",
       function creatureneuroimpls_count, function creature_get_neuroimpl, neuroimpl_def]]
    ];

  genotype_def =
    ["", "Genotype", null,
     [["parts", "Model Parts", "l Part", "",
       function genotypeparts_count, function genotype_get_part, part_def],
      ["joints", "Model Joints", "l Joint", "",
       function genotypejoints_count, function genotype_get_joint, joint_def],
      ["neurodefs", "Neuron Definitions", "l NeuroDef", "",
       function genotypeneurons_count, function genotype_get_neuro, neuro_def]]
    ];

  creaturesgroup_def =
    ["", "Population", null,
     [["creatures", "Creatures", "l Creature uid", "", function creaturesgroup_get_count, function creaturesgroup_get_creature, creature_def],
      ["creatures_changed", "creatures list changed", "e ListChange", "", function livechanged_events]]
    ];

  genotypegroup_def =
    ["", "GenePool", null,
     [["genotypes", "Genotypes", "l Genotype uid", "", function genotypegroup_get_count, function genotypegroup_get_genotype, genotype_def],
      ["genotypes_changed", "genotype list changed", "e ListChange", "", function genchanged_events]]
    ];

  path_definitions =
    [
      ["/simulator/experiment", "ExpParams", ExpParams.*,[]],

      ["/simulator/stats", "stats", stats.*,[]],

      ["/simulator/populations", "Populations", Populations.*,
       [["groups", "Groups", "l Population", "", function populations_get_count, function populations_get_group, creaturesgroup_def],
        ["groups_changed", "change events", "e ListChange", "", SimulatorEvents.livegroupchanged]]],

      ["/simulator/genepools", "GenePools", GenePools.*,
       [["groups", "Groups", "l GenePool", "", function genotypegroups_get_count, function genotypegroups_get_group, genotypegroup_def],
        ["groups_changed", "change events", "e ListChange", "", SimulatorEvents.gengroupchanged]]],

      ["/simulator/world", "World", World.*,
       [["faces", "Faces", "s", "ground geometry", function world_get_faces]]
      ],

      ["/simulator", "Simulator", Simulator.*,
       [["world", "World", "o World", ""],
        ["experiment", "Experiment", "o ExpParams", ""],
        ["genepools", "Gene pools", "o GenePools", ""],
        ["populations", "Populations", "o Populations", ""],
        ["stats", "stats", "o stats", ""],
        ["running_changed", "Simulation started/stopped", "e", "", SimulatorEvents.simrun],
        ["netload", "load experiment", "p()", "accepts the file from client", function simulator_netload],
        ["netsave", "save experiment", "p()", "sends the file to client", function simulator_netsave],
        ["netimport", "import file", "p(d options)", "accepts the file from client", function simulator_netimport],
        ["netexport", "export file", "p(d options,d genotypegroup,d creaturesgroup)", "sends the file to client", function simulator_netexport],
        ["stepevent", "Simulation step", "e SimStep", "", SimulatorEvents.simstep],
        ["expevent", "Experiment step", "e ExperimentStep", "", SimulatorEvents.expstep]]],

      ["/cli", "CLI", CLI.*,
       [["events", "Registered events", "l Event id", "", function events_get_count, function events_get_event, event_def],
        ["messages", "General messages", "e Msg", "", SimulatorEvents.msg]]],

      ["/", "Server", null,
       [["simulator", "Simulator", "o Simulator", ""],
        ["cli", "Commandline interface", "o CLI", ""],
        ["version", "Version", "s", "", "1.0"],
        ["motd", "Message Of The Day", "s", "", "Mostly harmless"]]]
    ];

  CLI.addMacro("?", 1, "CLI.println($1);", "evaluate expression");
  CLI.addMacro("lm", 0, "CLI.listMacros();", "list commandline macros");
  CLI.addMacro("qu", 0, "CLI.quit();", "leave comand shell");
  CLI.addMacro("ex", 1, "Simulator.expdef=\"$1\";", "set the experiment definition");
  CLI.addMacro("version", 1, "net_version($1);", "network protocol check");

  CLI.addMacro("client_v1", 0, "net_version(1);", "network protocol check");
  CLI.addMacro("t", 1, "test(\"$1\");;", "test");

  // client version
  g_usebranched=1; g_userequestid=0; g_usefile=1;
  define_client();
  CLI.addMacro("use", 1, "net_use(\"$1\");", "network protocol \"use\"");

  //CLI.println("Welcome to the Framsticks Server! :)");
}

function net_remove_macros()
{
CLI.removeMacro("get",-2);
CLI.removeMacro("set",-2);
CLI.removeMacro("info",-2);
CLI.removeMacro("call",-2);
CLI.removeMacro("reg",-2);
CLI.removeMacro("file",-2);
}

function net_use(feature)
{
switch (feature)
  {
  case "request_id": g_userequestid=1; break;

  default:
    CLI.println("error \"feature " + feature + " not supported\"");
    return;
  }
define_client();
CLI.println("ok");
}

function net_badargs()
{
 CLI.println("error \"bad arguments\"");
}

function net_version(ver)
{
if (ver==1)
	{g_usebranched=0; g_userequestid=1; g_usefile=0;}
else if (ver==2)
	{g_usebranched=0; g_userequestid=0; g_usefile=1;}
else if ((ver==3)||(ver==4))
	{g_usebranched=1; g_userequestid=0; g_usefile=1;}
else
	{
	CLI.println("error \"protocol version " + ver + " not supported\"");
	return;
	}

define_client();
CLI.println("ok");
}

function define_client()
{
net_remove_macros();

if (g_usefile)
	{
	CLI.addMacro("file", 0, "net_file(\"\");", "network protocol \"file\"");
	CLI.addMacro("file", 1, "net_file(\"$1\");", "network protocol \"file\"");
        }

if (g_userequestid)
	{
	CLI.addMacro("info", 1, "net_badargs();", "");
	CLI.addMacro("get", 1, "net_badargs();", "");
	CLI.addMacro("set", 1, "net_badargs();", "");
	CLI.addMacro("set", 3, "net_badargs();", "");
	CLI.addMacro("call", 2, "net_badargs();", "");
	CLI.addMacro("reg", 1, "net_badargs();", "");

	CLI.addMacro("info", 2, "net_info(\"$1\",\"$2\");", "network protocol \"info\"");
	CLI.addMacro("get", 2, "net_get(\"$1\",\"$2\",null);", "network protocol \"get\"");
	CLI.addMacro("get", 3, "net_get(\"$1\",\"$2\",\"$3\");", "network protocol \"get\"");
	CLI.addMacro("set", 2, "net_set_file(\"$1\",\"$2\");", "network protocol \"set\"");
	CLI.addMacro("set", 4, "net_set(\"$1\",\"$2\",\"$3\",\"$4\");", "network protocol \"set\"");
	CLI.addMacro("call", 3, "net_call(\"$1\",\"$2\",\"$3\",null,null,null);", "network protocol \"call\"");
	CLI.addMacro("call", 4, "net_call(\"$1\",\"$2\",\"$3\",\"$4\",null,null);", "network protocol \"call\"");
	CLI.addMacro("call", 5, "net_call(\"$1\",\"$2\",\"$3\",\"$4\",\"$5\",null);", "network protocol \"call\"");
	CLI.addMacro("call", 6, "net_call(\"$1\",\"$2\",\"$3\",\"$4\",\"$5\",\"$6\");", "network protocol \"call\"");
	CLI.addMacro("reg", 2, "net_reg(\"$1\",\"$2\",0,null);", "network protocol \"reg\"");
	CLI.addMacro("reg", 3, "net_reg(\"$1\",\"$2\",$3,null);", "network protocol \"reg\"");
	CLI.addMacro("reg", 4, "net_reg(\"$1\",\"$2\",$3,\"$4\");", "network protocol \"reg\"");

	if (g_usebranched)
		{
		CLI.addMacro("get", 2, "net_get_3(\"$1\",\"$2\",null);", "network protocol \"get\"");
		CLI.addMacro("get", 3, "net_get_3(\"$1\",\"$2\",\"$3\");", "network protocol \"get\"");
		}
	else
		{
		CLI.addMacro("get", 2, "net_get(\"$1\",\"$2\",null);", "network protocol \"get\"");
		CLI.addMacro("get", 3, "net_get(\"$1\",\"$2\",\"$3\");", "network protocol \"get\"");
		}
	}
else
	{	
	CLI.addMacro("info", 2, "net_badargs();", "");
	CLI.addMacro("get", 3, "net_badargs();", "");
	CLI.addMacro("set", 2, "net_badargs();", "");
	CLI.addMacro("set", 4, "net_badargs();", "");
	CLI.addMacro("call", 6, "net_badargs();", "");
	CLI.addMacro("reg", 4, "net_badargs();", "");

	CLI.addMacro("info", 1, "net_info(\"\",\"$1\");", "network protocol \"info\"");
	CLI.addMacro("get", 1, "net_get(\"\",\"$1\",null);", "network protocol \"get\"");
	CLI.addMacro("get", 2, "net_get(\"\",\"$1\",\"$2\");", "network protocol \"get\"");
	CLI.addMacro("set", 1, "net_set_file(\"\",\"$1\");", "network protocol \"set\"");
	CLI.addMacro("set", 3, "net_set(\"\",\"$1\",\"$2\",\"$3\");", "network protocol \"set\"");
	CLI.addMacro("call", 2, "net_call(\"\",\"$1\",\"$2\",null,null,null);", "network protocol \"call\"");
	CLI.addMacro("call", 3, "net_call(\"\",\"$1\",\"$2\",\"$3\",null,null);", "network protocol \"call\"");
	CLI.addMacro("call", 4, "net_call(\"\",\"$1\",\"$2\",\"$3\",\"$4\",null);", "network protocol \"call\"");
	CLI.addMacro("call", 5, "net_call(\"\",\"$1\",\"$2\",\"$3\",\"$4\",\"$5\");", "network protocol \"call\"");
	CLI.addMacro("reg", 1, "net_reg(\"\",\"$1\",0,null);", "network protocol \"reg\"");
	CLI.addMacro("reg", 2, "net_reg(\"\",\"$1\",$2,null);", "network protocol \"reg\"");
	CLI.addMacro("reg", 3, "net_reg(\"\",\"$1\",$2,\"$3\");", "network protocol \"reg\"");

	if (g_usebranched)
		{
		CLI.addMacro("get", 1, "net_get_3(\"\",\"$1\",null);", "network protocol \"get\"");
		CLI.addMacro("get", 2, "net_get_3(\"\",\"$1\",\"$2\");", "network protocol \"get\"");
		}
	else
		{
		CLI.addMacro("get", 1, "net_get(\"\",\"$1\",null);", "network protocol \"get\"");
		CLI.addMacro("get", 2, "net_get(\"\",\"$1\",\"$2\");", "network protocol \"get\"");
		}
	}
}

function requestFiles(count, fun)
{
  g_needfiles = count;
  g_filesready_fun = fun;
  g_files = [];
  g_file = "";
}

function requestFile(name, info, fun)
{
  requestFiles(1, fun);
  CLI.println("needfile \"" + name + "\" \"" + info + "\"");
}

function file_handler(txt)
{
  if (txt == "eof")
  {
    CLI.cmdhandler = "";
    g_files.add(g_file);
    if (g_files.size == g_needfiles)
    {
      call (g_filesready_fun)();
      g_filesready_fun = 0;
      g_needfiles = 0;
    }
    return ;
  }
  g_file = g_file + txt + "\n";
}

function net_file(name)
{
  CLI.cmdhandler = "file_handler";
  g_file = "";
}

function test(path)
{
  var handler = find_best_def(path);
  if (handler == null)
  {
    CLI.println("invalid path");
    return ;
  }
  if (analyze_path(handler, path))
  {
    CLI.println("path ok");
    CLI.println("curr_def=" + curr_def);
    CLI.println("curr_def[0]=" + curr_def[0]);
    CLI.println("curr_def[2]=" + curr_def[2]);
  }
  else
    CLI.println("invalid path");
}

function simulator_netload(obj, arg1, arg2, arg3)
{
  requestFile("*.expt", "Experiment", function simulator_netload_ready);
}

function simulator_netload_ready()
{
  var f = File.create("tmpsave", "temporary file");
  f.writeString(g_files[0]);
  f.close();
  Simulator.load("scripts_output" + f.pathseparator + "tmpsave");
  CLI.println("ok");
}

function simulator_netsave(obj, arg1, arg2, arg3)
{
  Simulator.save("tmpsave");
  var f = File.open("scripts_output"+File.pathseparator+"tmpsave");
  var t = f.readUntilEOF();
  CLI.println("file experiment.expt \"Current experiment state\"");
  CLI.println(t);
  CLI.println("eof");
  CLI.println("ok");
}

function simulator_netimport(obj, arg1, arg2, arg3)
{
  g_tmp = arg1;
  requestFile("*", "File to be load into the simulator", function simulator_netimport_ready);
}

function simulator_netimport_ready()
{
  var f = File.create("tmpsave", "temporary file");
  f.writeString(g_files[0]);
  f.close();
  Simulator.import("scripts_output" + f.pathseparator + "tmpsave", 0+g_tmp);
  CLI.println("ok");
}

function simulator_netexport(obj, arg1, arg2, arg3)
{
  Simulator.export("tmpsave", arg1, arg2, arg3);
  var f = File.open("scripts_output" + File.pathseparator +"tmpsave");
  var t = f.readUntilEOF();
  CLI.println("file");
  CLI.println(t);
  CLI.println("eof");
  CLI.println("ok");
}

function find_best_def(path)
{
  var i;
  for (i = 0;i < path_definitions.size;i++)
  {
    var d = path_definitions[i];
    if (String.left(path, String.len(d[0])) == d[0])
      return d;
  }
  return null;
}

function analyze_path(def, path)
{
  //CLI.println("analyze_path("+def[0]+","+path+")   obj="+def[2]);
  curr_collection = null;
  if (def == null)
    return 0;
  var xtraprops = def[3];
  var i;
  if (path != def[0])
  {
    if (xtraprops != null)
    {
      var subpath = String.substr(path, String.len(def[0]) + 1, 999);
      var subname = String.indexOf(subpath, "/");
      if (subname < 0)
        subname = subpath;
      else
        subname = String.left(subpath, subname);
      for (i = 0;i < xtraprops.size;i++)
      {
        var prop = xtraprops[i];
        if (subname == prop[0])
        {
          var t = String.substr(prop[2], 0, 1);
          if (t == "l")
          {
            subpath = String.substr(subpath, String.len(prop[0]) + 1, 999);
            return analyze_collection_path(def[2], prop, subpath);
          }
          else if (t == "e")
          {
            curr_def = prop;
            curr_parent = def[2];
            //					obj=call(propdata[5])(curr_parent,null);
            //					curr_def.set(2,obj);
            return 1;
          }
        }
      }
    }
    return 0;
  }
  curr_def = def;
  return 1;
}

function analyze_collection_path(parent, propdata, path)
{
  //Simulator.print("analyze_collection_path("+parent+",["+propdata[0]+",...],"+path+")");
  var obj;
  if (path == "")
  {
    curr_collection = propdata;
    curr_parent = parent;
    obj = call(propdata[5])(parent,-1);
    curr_def = propdata[6];
    curr_def.set(2, obj);
    return 1;
  }
  var i = String.indexOf(path, "/");
  if (i < 0)
    i = 999;
  var index = String.substr(path, 0, i);
  //Simulator.print("collection index="+index);
  path = String.substr(path, i, 999);
  obj = call(propdata[5])(parent, index);
  //Simulator.print("collection subobject="+obj);
  if (obj == null)
    return 0;
  propdata[6].set(2, obj);
  return analyze_path(propdata[6], path);
}

function standard_info(id, cls, obj, xtraprops)
{
  CLI.println("file " + id);
  CLI.println("class:\nid:" + cls + "\n");
  if (obj != null)
    CLI.print(propsForObject(obj));
  if (xtraprops != null)
  {
    var i;
    for (i = 0;i < xtraprops.size;i++)
    {
      var prop = xtraprops[i];
      CLI.println(makePropDef(prop[0], prop[1], prop[2], 0, prop[3]));
    }
  }
  CLI.println("eof");
  CLI.println("ok " + id);
}

function world_get_faces(obj)
{
  var ret = "";
  switch (World.wrldtyp)
  {
  case 0:
    ret = makeFlatFaces();
    break;
  case 1:
    ret = makeBlockFaces();
    break;
  case 2:
    ret = makeHeightfieldFaces();
    break;
  }
  return ret;
}

function makeFlatFaces()
{
  return "p\n0 0 0\n"
         + World.wrldsiz + " 0 0\n"
         + World.wrldsiz + " " + World.wrldsiz + " 0\n"
         + "0 " + World.wrldsiz + " 0\n"
         + "f\n0 1 2 3\n";
}

function makeBlockFaces()
{
  var xs = WorldMap.xsize - 2, ys = WorldMap.ysize - 2;
  var blockx = World.wrldsiz / xs, blocky = World.wrldsiz / ys;
  var mx, my, x, y;
  var xyz = "";
  var ci = "";
  var ind = 0, ind0;
  y = 0.0;
  for (my = 1;my <= ys;my++)
  {
    x = 0.0;
    for (mx = 1;mx <= xs;mx++)
    {

      var z, z0, zx, zy, zxy, zy0, zy1, zx0, zx1, n1, nn;
      z = WorldMap.getMap(mx, my).z;

      switch (WorldMap.getMap(mx, my).type)
      {
      case 0:
        z0 = z;
        zx = z;
        zy = z;
        zxy = z;
        break;
      case 1:
        z0 = WorldMap.getMap(mx - 1, my).z;
        zy = z0;
        zx = WorldMap.getMap(mx + 1, my).z;
        zxy = zx;
        break;
      case 2:
        z0 = WorldMap.getMap(mx, my - 1).z;
        zx = z0;
        zy = WorldMap.getMap(mx, my + 1).z;
        zxy = zy;
        break;
      }
      var x2 = x + blockx, y2 = y + blocky;
      ind0 = ind;
      xyz += "" + x + " " + y + " " + z0 + "\n" + x2 + " " + y + " " + zx + "\n"
             + x2 + " " + y2 + " " + zxy + "\n" + x + " " + y2 + " " + zy + "\n";
      ci += "" + ind + " " + (ind + 1) + " " + (ind + 2) + " " + (ind + 3) + "\n";
      ind += 4;

      switch (WorldMap.getMap(mx, my - 1).type)
      {
      case 0:
        zy0 = WorldMap.getMap(mx, my - 1).z;
        zy1 = zy0;
        break;
      case 1:
        zy0 = WorldMap.getMap(mx - 1, my - 1).z;
        zy1 = WorldMap.getMap(mx + 1, my - 1).z;
        break;
      case 2:
        zy0 = z0;
        zy1 = z0;
        break;
      }
      if ((z0 != zy0) || (zx != zy1))
      {
        xyz += "" + x + " " + y + " " + zy0 + "\n" + x2 + " " + y + " " + zy1 + "\n";
        ci += "" + (ind0 + 1) + " " + ind0 + " " + ind + " " + (ind + 1) + "\n";
        ind += 2;
      }

      switch (WorldMap.getMap(mx - 1, my).type)
      {
      case 0:
        zx0 = WorldMap.getMap(mx - 1, my).z;
        zx1 = zx0;
        break;
      case 1:
        zx0 = z0;
        zx1 = z0;
        break;
      case 2:
        zx0 = WorldMap.getMap(mx - 1, my - 1).z;
        zx1 = WorldMap.getMap(mx - 1, my + 1).z;
        break;
      }
      if ((z0 != zx0) || (zy != zx1))
      {
        xyz += "" + x + " " + y2 + " " + zx1 + "\n" + x + " " + y + " " + zx0 + "\n";
        ci += "" + ind0 + " " + (ind0 + 3) + " " + ind + " " + (ind + 1) + "\n";
        ind += 2;
      }


      x += blockx;
    }
    y += blocky;
  }

  return "p\n" + xyz + "f\n" + ci;
}

function makeHeightfieldFaces()
{
  var xyz = "", ci = "";
  var i, j;
  var bx = World.wrldsiz / WorldMap.xsize;
  var by = World.wrldsiz / WorldMap.ysize;

  for (j = 0;j <= WorldMap.ysize;j++)
    for (i = 0;i <= WorldMap.xsize;i++)
    {
      xyz += "" + (bx * i) + " " + (by * j) + " " + WorldMap.getMap(i, j).z + "\n";
    }

  var ind;
  for (j = 0;j < WorldMap.ysize;j++)
    for (i = 0;i < WorldMap.xsize;i++)
    {
      ind = (WorldMap.xsize + 1) * j + i;
      ci += "" + ind + " " + (ind + 1) + " " + (ind + WorldMap.xsize + 1) + "\n";
      ci += "" + (ind + WorldMap.xsize + 1) + " " + (ind + 1) + " " + (ind + WorldMap.xsize + 2) + "\n";
    }
  return "p\n" + xyz + "f\n" + ci;
}

function creaturemechparts_count(obj)
{
  if (obj == null)
    return 0;
  return obj.numparts;
}

function creature_get_mechpart(obj, selector)
{
  if (selector < 0)
    return MechPart.*;
  return obj.getMechPart(selector);
}

function creaturemechjoints_count(obj)
{
  if (obj == null)
    return 0;
  return obj.numjoints;
}

function creature_get_mechjoint(obj, selector)
{
  if (selector < 0)
    return MechJoint.*;
  return obj.getMechJoint(selector);
}


function creatureparts_count(obj)
{
  if (obj == null)
    return 0;
  return obj.numparts;
}

function creature_get_part(obj, selector)
{
  if (selector < 0)
    return Part.*;
  return obj.getPart(selector);
}

function creaturejoints_count(obj)
{
  if (obj == null)
    return 0;
  return obj.numjoints;
}

function creature_get_joint(obj, selector)
{
  if (selector < 0)
    return Joint.*;
  return obj.getJoint(selector);
}

function creatureneurons_count(obj)
{
  if (obj == null)
    return 0;
  return obj.numneurons;
}

function creature_get_neuro(obj, selector)
{
  if (selector < 0)
    return NeuroDef.*;
  return obj.getNeuroDef(selector);
}

function creatureneuroimpls_count(obj)
{
  if (obj == null)
    return 0;
  return obj.numneurons;
}

function creature_get_neuroimpl(obj, selector)
{
  if (selector < 0)
    return Neuro.*;
  return obj.getNeuro(selector);
}

///////////////////////////

function genotypeparts_count(obj)
{
  if (obj == null) return 0;
  var m=obj.getModel();
  if (m == null) return 0;
  return m.numparts;
}

function genotype_get_part(obj, selector)
{
  if (selector < 0)
    return Part.*;
  var m=obj.getModel();
  return m.getPart(selector);
}

function genotypejoints_count(obj)
{
  if (obj == null) return 0;
  var m=obj.getModel();
  if (m == null) return 0;
  return m.numjoints;
}

function genotype_get_joint(obj, selector)
{
  if (selector < 0)
    return Joint.*;
  var m=obj.getModel();
  return m.getJoint(selector);
}

function genotypeneurons_count(obj)
{
  if (obj == null) return 0;
  var m=obj.getModel();
  if (m == null) return 0;
  return m.numneurons;
}

function genotype_get_neuro(obj, selector)
{
  if (selector < 0)
    return NeuroDef.*;
  var m=obj.getModel();
  return m.getNeuroDef(selector);
}

/////////////////////////////////////

function populations_get_group(obj, selector)
{
  if (selector < 0)
    return Population.*;
  return Populations.get(selector);
}

function populations_get_count(obj)
{
  if (obj == null)
    return 0;
  return obj.size;
}

function genotypegroups_get_group(obj, selector)
{
  if (selector < 0)
    return GenePool.*;
  return GenePools.get(selector);
}

function genotypegroups_get_count(obj)
{
  if (obj == null)
    return 0;
  return obj.size;
}

function creaturesgroup_get_creature(obj, selector)
{
  if (selector < 0)
    return Creature.*;
  return obj.get(selector);
}

function creaturesgroup_get_count(obj)
{
  if (obj == null)
    return 0;
  return obj.size;
}

function genotypegroup_get_genotype(obj, selector)
{
  if (selector < 0)
    return Genotype.*;
  return obj.get(selector);
}

function genotypegroup_get_count(obj)
{
  if (obj == null)
    return 0;
  return obj.size;
}

function events_get_event(obj, selector)
{
  if (selector < 0)
    return Event.*;
  return EventReceiver.get(selector);
}

function events_get_count(obj)
{
  if (obj == null)
    return 0;
  return EventReceiver.count;
}

function livechanged_events(obj)
{
  //Simulator.print("liveadded_events..."+obj+"...index="+obj.index);
  return SimulatorEvents.livechanged(obj.index);
}

function genchanged_events(obj)
{
  return SimulatorEvents.genchanged(obj.index);
}

function net_call(id, path, action, arg1, arg2, arg3)
{
  var def = find_best_def(path);
  if (analyze_path(def, path))
  {
    if (curr_collection != null)
    {
      CLI.println("error " + id + " \"invalid collection path for call\"");
      return ;
    }
    var iface = Interface.makeFrom(curr_def[2]);
    if (iface == null)
    {
      CLI.println("error " + id + " \"object not found for call\"");
      return ;
    }
    var i = iface.findId(action);
    if (i >= 0)
    {
      var args = Vector.new();
      if (arg1 != null)
        args.add(arg1);
      if (arg2 != null)
        args.add(arg2);
      if (arg3 != null)
        args.add(arg3);
      var ret = iface.invoke(i, args);
      if (ret != null)
        CLI.println("file " + id + "\nResult:\nvalue:" + ret + "\neof");
      CLI.println("ok " + id);
      return ;
    }
    var xtraprops = curr_def[3];

    if (xtraprops != null)
    {
      var p = find_prop(xtraprops, action);
      if (p != null)
      {
        if ((typeof p[4]) == 1)
          call(p[4])(curr_def[2], arg1, arg2, arg3);
        return ;
      }
    }
    CLI.println("error " + id + " \"invalid action for call\"");
  }
  else
    CLI.println("error " + id + " \"invalid path for call\"");
}

function net_set_file_ready()
{
  CLI.println("got file for:" + curr_def[2] + "\n->\n" + g_files[0]);
  var f = File.newFromString(g_files[0]);
  f.readObject(curr_def[2]);
  CLI.println("ok");
}

function net_set_file(id, path)
{
  var def = find_best_def(path);
  if (analyze_path(def, path))
  {
    if (curr_collection != null)
    {
      CLI.println("error " + id + " \"invalid collection path for set\"");
      return ;
    }
    var iface = Interface.makeFrom(curr_def[2]);
    if (iface == null)
    {
      CLI.println("error " + id + " \"object not found for set\"");
      return ;
    }
    requestFile("*", "Properties for " + path, function net_set_file_ready);
  }
  else
    CLI.println("error " + id + " \"invalid path for call\"");
}

function net_set(id, path, prop, value)
{
  var def = find_best_def(path);
  if (analyze_path(def, path))
  {
    if (curr_collection != null)
    {
      CLI.println("error " + id + " \"invalid collection path for set\"");
      return ;
    }
    var iface = Interface.makeFrom(curr_def[2]);
    if (iface == null)
    {
      CLI.println("error " + id + " \"object not found for set\"");
      return ;
    }
    var iprop = iface.findId(prop);
    if (iprop < 0)
    {
      var xtraprops = curr_def[3];
      if (xtraprops != null)
      {
        var p = find_prop(xtraprops, prop);
        if (p != null)
        {
          if ((typeof p[5]) == 1)
            call(p[5])(curr_def[2], value);
          CLI.println("ok " + id);
          return ;
        }
      }
      CLI.println("error " + id + " \"invalid property for set\"");
      return ;
    }
    CLI.println("ok " + id);
    var ret = iface.set(iprop, value);
  }
  else
    CLI.println("error " + id + " \"invalid path for set\"");
}


function net_info(id, path)
{
  var def = find_best_def(path);
  if (analyze_path(def, path))
  {
    if (String.left(curr_def[2], 1) == "e")
    {
      var obj = curr_def[4];
      if ((typeof obj) == 1)
        obj = call(obj)(curr_parent);
      obj = obj.interface;
      standard_info(id, obj.name, obj, null);
    }
    else
      standard_info(id, curr_def[1], curr_def[2], curr_def[3]);
  }
  else
    CLI.println("error " + id + " \"invalid path for info\"");
}

function net_reg(id, path, type, name)
{
  var def = find_best_def(path);
  if (analyze_path(def, path))
  {
    if (String.substr(curr_def[2], 0, 1) == "e")
    {
      var value = curr_def[4];
      if ((typeof value) == 1)
        value = call(value)(curr_parent);
      var event = EventReceiver.add(value);
      if (event != null)
      {
        event.type = type;
        if (name != null)
          event.id = name;
        event.name = path;
	event.path = "/cli/events/";
        CLI.println("ok " + id + " " + event.path + event.id);
        return ;
      }
      CLI.println("error " + id);
      return ;
    }
  }
  CLI.println("error " + id + " \"invalid path for reg\"");
}

function skip_to_close(path,p)
{
var p1,p2,p3;
var retry=1;
while(retry)
 {
p1=String.indexOfStart(path,")",p);
p2=String.indexOfStart(path,"(",p);if (p2<0) p2=9999;
p3=String.indexOfStart(path,"{",p);if (p3<0) p3=9999;
if ((p2<p1)&&(p2<p3))
	{
	p=skip_to_close(path,p2+1);
	continue;
	}
if (p3<p1)
	{
	p=skip_to_closebrace(path,p3+1);
	continue;
	}
 retry=0;
 }
if (p1>=0)
	{
	return p1+1;
	}
return String.len(path);
}

function skip_to_closebrace(path,p)
{
var p1,p2,p3;
var retry=1;
while(retry)
 {
p1=String.indexOfStart(path,"}",p);
p2=String.indexOfStart(path,"{",p);if (p2<0) p2=9999;
p3=String.indexOfStart(path,"(",p);if (p3<0) p3=9999;
if ((p2<p1)&&(p2<p3))
	{
	p=skip_to_closebrace(path,p2+1);
	continue;
	}
if (p3<p1)
	{
	p=skip_to_close(path,p3+1);
	continue;
	}
 retry=0;
 }
if (p1>=0)
	{
	return p1+1;
	}
return String.len(path);
}

function skip_to_comma(path,p)
{
var p1,p2,p3,p4;
var retry=1;
while(retry)
 {
p1=String.indexOfStart(path,",",p); if (p1<0) p1=9999;
p2=String.indexOfStart(path,")",p);
p3=String.indexOfStart(path,"(",p); if (p3<0) p3=9999;
p4=String.indexOfStart(path,"{",p); if (p4<0) p4=9999;

if ((p3<p1)&&(p3<p2)&&(p3<p4))
	{
	p=skip_to_close(path,p3+1);
	continue;
	}
if ((p4<p1)&&(p4<p2))
	{
	p=skip_to_closebrace(path,p4+1);
	continue;
	}
 retry=0;
 }
if (p1<p2)
	return p1;
if (p2>=0)
	return p2;
return 9999;
}

function preprocess_parens(path)
{
var p;
p=String.indexOf(path,"(");
if (p>=0)
  {
  var c=Vector.new();
  var end=skip_to_close(path,p+1);
  var pre=String.left(path,p);
  var post=String.substr(path,end,9999);
  var p2;
  var newpath,newpp;
  p++;
  while(p<end)
	  {
	  p2=skip_to_comma(path,p);
	  newpath=pre+String.substr(path,p,p2-p)+post;
	  newpp=preprocess_parens(newpath);
	  if (newpp)
		  {
		  var i;
		  for(i=0;i<newpp.size;i++) c.add(newpp[i]);
		  }
	  else
		  c.add(newpath);
	  p=p2+1;
	  }
  return c;
  }
return null;
}

function preprocess_plus(path)
{
var p;
p=String.indexOf(path,"+");
if (p<0) return null;

var pre=String.left(path,p);
var post=String.substr(path,p+1,9999);

var def = find_best_def(pre);
if (analyze_path(def, pre))
  {
  if (curr_collection != null)
    {
    var i, n = call(curr_collection[4])(curr_parent);
    if (n>0)
	    {
	    var pp=Vector.new();
	    for(i=0;i<n;i++)
	       {
	       var newpath=pre+i+post;
	       var newpp=preprocess_plus(newpath);
	       if (newpp)
		       {
		       var j;
		       for(j=0;j<newpp.size;j++)
			       pp.add(newpp[j]);
		       }
	       else
		       pp.add(newpath);
	       }
	    return pp;
	    }
    }
  }
return Vector.new();
}

function preprocess_path(path)
{
var pp;
pp=preprocess_parens(path);
if (pp)
	{
	var newpp=Vector.new();
	var i;
	for(i=0;i<pp.size;i++)
		{
		var pp2=preprocess_plus(pp[i]);
		if (pp2)
			{
			var j;
			for(j=0;j<pp2.size;j++)
				newpp.add(pp2[j]);
			}
		else
			newpp.add(pp[i]);
		}
	return newpp;
	}
else
	return preprocess_plus(path);
}

function net_get_3(id, path, attrs)
{
var pp=preprocess_path(path);
if (pp)
	{
	var i;
	for(i=0;i<pp.size;i++)
		{
		var p=pp[i];
		var p_id=p;
		if (id!="") p_id=id+" "+p;
		net_get_work(p_id,p,attrs);
		}
	if (id!="") id=" "+id;
	CLI.println("ok"+id);
	}
else
	net_get(id,path,attrs);
}

function net_get(id, path, attrs)
{
if (net_get_work(id, path, attrs))
	CLI.println("ok " + id);
else
	CLI.println("error " + id + " \"invalid path for get\"");
}

function net_get_work(id, path, attrs)
{
  var def = find_best_def(path);
  if (String.right(path,1)=="}")
	  {
	  var p=String.indexOf(path,"{");
	  if (p>=0)
		  {
		  attrs=String.substr(path,p+1,String.len(path)-p-2);
		  path=String.left(path,p);
		  id=path;
		  }
	  }
  if (analyze_path(def, path))
  {
    if (attrs != null)
      attrs = String.split(attrs, ",");
    CLI.println("file " + id);
    if (curr_collection != null)
    {
      var n = call(curr_collection[4])(curr_parent), fun = curr_collection[5], i, obj;
      for (i = 0;i < n;i++)
      {
        obj = call(fun)(curr_parent, i);
        standard_get(obj, attrs);
      }
    }
    else
      standard_get(curr_def[2], attrs);
    CLI.println("eof");
    return 1;
  }
  else
	  return 0;
}

function standard_get(obj, attrs)
{
  //Simulator.print("standard_get "+obj+"   name="+obj.name+"  def="+curr_def);
  var cls = curr_def[1];
  var xtraprops = curr_def[3];
  var f = File.new();
  var i;
  CLI.println(cls + ":");
  if (attrs == null)
  {
    if (obj != null)
      f.writeObjectFieldsForce(obj);
  }
  else
  {
    if (obj != null)
      for (i = 0;i < attrs.size;i++)
        f.writeObjectFieldForce(obj, attrs[i]);
  }
  CLI.print(f.close());
  if (xtraprops != null)
  {
    if (attrs == null)
      for (i = 0;i < xtraprops.size;i++)
        get_single_prop(obj, xtraprops[i]);
    else
      for (i = 0;i < attrs.size;i++)
      {
        var p = find_prop(xtraprops, attrs[i]);
        if (p != null)
          get_single_prop(obj, p);
      }
  }
  CLI.println("");
}

function find_prop(props, name)
{
  var i, p;
  for (i = 0;i < props.size;i++)
  {
    p = props[i];
    if (p[0] == name)
      return p;
  }
  return null;
}

function get_single_prop(obj, prop)
{
  var t = prop[2];
  if (t == null)
    return ;
  t = String.substr(t, 0, 1);
  if ((t == "o") || (t == "p") || (t == "e"))
    return ;
  var value;
  if ((typeof prop[4]) == 1)
    value = call(prop[4])(obj);
  else
    value = prop[4];
  CLI.print(makePropValue(prop[0], value));
}

function makePropDef(id, name, type, flags, info)
{
  var ret = "prop:\nid:" + id + "\nname:" + name + "\ntype:" + type + "\n";
  if (flags != 0)
    ret += "flags:" + flags + "\n";
  if (info != "")
    {
    if (String.indexOf(info,"\n")>=0) info="~\n"+info+"~";
    ret += "help:" + info + "\n";
    }
  return ret;
}

function makePropValue(name, value)
{
  if (String.indexOf(value, "\n") >= 0)
    return name + ":~\n" + value + "~\n";
  else
    return name + ":" + value + "\n";
}

function propsForObject(obj)
{
  if (obj == null)
    return "";
  var iface;
  if ((typeof obj) == "Interface")
    iface = obj;
  else
    iface = Interface.makeFrom(obj);
  var i, t, t1;
  var result = "";
  for (i = 0;i < iface.properties;i++)
  {
    t = iface.getType(i);
    t1 = String.left(t, 1);
    if (t1 != "o")
      result = result + makePropDef(iface.getId(i), iface.getName(i), t,
                                    iface.getFlags(i), iface.getHelp(i)) + "\n";
  }
  return result;
}

function net_get_object(obj, attrs)
{
  if (attrs != null)
    attrs = String.split(attrs, ",");
  var iface = Interface.makeFrom(obj);
  var a, i, t, t1;
  var result = "";
  if (attrs == null)
  {
    for (i = 0;i < iface.properties;i++)
    {
      t = iface.getType(i);
      t1 = String.left(t, 1);
      if ((t1 != "o") && (t1 != "p"))
        result = result + makePropValue(iface.getId(i), iface.get(i));
    }
  }
  else
  {
    for (a = 0;a < attrs.size;a++)
    {
      i = iface.findId(attrs[a]);
      if (i < 0)
        continue;
      t = iface.getType(i);
      t1 = String.left(t, 1);
      if ((t1 != "o") && (t1 != "p"))
        result = result + makePropValue(iface.getId(i), iface.get(i));
    }
  }
  CLI.print(result);
}
