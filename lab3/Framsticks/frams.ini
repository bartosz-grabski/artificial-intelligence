function init()
{
  CLI.addMacro("lg", 0, "listgenotypes(0);", "list genotypes from group 0");
  CLI.addMacro("lg", 1, "listgenotypes($1);", "list genotypes from any group");
  CLI.addMacro("lc", 0, "listcreatures(0);", "list creatures from group 0");
  CLI.addMacro("lc", 1, "listcreatures($1);", "list creatures from any group");
  //CLI.addMacro("lgg",0,"....listing genotype groups...","list genotype groups");
  CLI.addMacro("help", 0, "shorthelp();", "display short help message");
  CLI.addMacro("qu", 0, "CLI.quit();", "leave comand shell");
  CLI.addMacro("lm", 0, "CLI.listMacros();", "list command-line macros");
  CLI.addMacro("st", 0, "Simulator.step();", "do single simulation step");
  CLI.addMacro("st", 1, "Simulator.start();{var i;for(i=0;(i<$1)&&Simulator.running;i++) Simulator.step();} Simulator.stop();", "do N simulation steps");
  CLI.addMacro("go", 0, "Simulator.start();while(Simulator.running) Simulator.step();", "simulate until interrupted");
  CLI.addMacro("lo", 1, "Simulator.load(\"$1\");", "load experiment, genotypes, settings (expt/gen/sim) file");
  CLI.addMacro("im", 1, "Simulator.import(\"$1\",2+4+8+16+64);", "import experiment, genotypes, settings (expt/gen/sim) file");
  CLI.addMacro("ex", 1, "Simulator.expdef=\"$1\";", "set the experiment definition");
  CLI.addMacro("sa", 1, "Simulator.save(\"$1\");", "save experiment (expt) file");
  CLI.addMacro("??", 1, "search(\"$1\");", "search classes information");
  CLI.addMacro("??", 0, "aftersearch();", "show last search results again");
  CLI.addMacro("?", -1, "CLI.println($0);", "evaluate expression");

  if (!CLI.quiet)
     {
     CLI.println("---------------------------------------------------");
     shorthelp();
     }
}

function shorthelp()
{
  CLI.println("Basic commands:");
  CLI.println(" - help      : show this help message");
  CLI.println(" - qu or EOF : leave command shell");
  CLI.println(" - lo FILENAME  : load experiment, genotypes, settings (expt/gen/sim)");
  CLI.println(" - sa FILENAME  : save experiment (expt)");
  CLI.println(" - st        : do single simulation step");
  CLI.println(" - st NNN    : do NNN simulation steps");
  CLI.println(" - go        : simulate until interrupted (ctrl+c)");
  CLI.println(" - lm        : list all commandline macros");
}

function search(word)
{
  if ((0 + word) > 0)
  {
    showresult( -1 + word);
    return ;
  }
  ClassBrowser.search(word);
  aftersearch();
}

function aftersearch()
{
  var n = ClassBrowser.resultCount;
  if (n == 0)
  {
    CLI.println("not found!");
    return ;
  }
  if (n == 1)
    showresult(0);
  else
  {
    var i;
    for (i = 0;i < n;i++)
      CLI.println("" + (i + 1) + ". " + ClassBrowser.getLabel(i)+"\t"+ClassBrowser.getTypeName(i));
    CLI.println("  use ?? NUMBER to show item details");
  }
}

function showresult(which)
{
  if (which < 0)
    return ;
  if (which >= ClassBrowser.resultCount)
    return ;
  CLI.println(ClassBrowser.getText(which));
}

function listgenotypes(group)
{
  GenePools.group = group;
  if (GenePool.size == 0)
  {
    CLI.println("Group " + group + " is empty");
    return ;
  }
  RowFormat.clear();
  RowFormat.prepare(Genotype.*, "name/20,strsiz/5,nnsiz/5,fit/6");
  CLI.println("   " + RowFormat.header + " (" + GenePool.name + ")");
  var i;
  for (i = 0;i < GenePool.size;i++)
  {
    GenePools.genotype = i;
    CLI.println("" + (i + 1) + ". " + RowFormat.format(Genotype.*));
  }
}

function listcreatures(group)
{
  Populations.group = group;
  if (Population.size == 0)
  {
    CLI.println("Group " + group + " is empty");
    return ;
  }
  RowFormat.clear();
  RowFormat.prepare(Creature.*, "name/20,lifespan/7,energy/7,distance/7");
  CLI.println("   " + RowFormat.header + " (" + Population.name + ")");
  var i;
  for (i = 0;i < Population.size;i++)
  {
    Populations.creature = i;
    CLI.println("" + (i + 1) + ". " + RowFormat.format(Creature.*));
  }
}

function onBreak()
{
  if (Simulator.running)
  {
    CLI.println("stopping simulation...");
    Simulator.stop();
    return 1; // 1=the signal is already handled
  }
  else
  {
    CLI.println("interrupt!");
    return 0; // 0=the default handling will be applied after "onBreak"
  }
}
