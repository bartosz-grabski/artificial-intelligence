// This is an alternative .ini file for simple batch processing.
// Add the -e switch to suppress output messages.
//
// Sample usage:
//    frams -Q -s -icliutils.ini makef0 -q <somegenotype
//    frams -Q -s -icliutils.ini rnd mut -q <somegenotype
//    frams -Q -s -icliutils.ini "simil filename.gen" -q >similarity_matrix.txt
//    frams -Q -s -icliutils.ini "diversity filename.gen" -q >diversities.txt
//    frams -Q -s -icliutils.ini "symmetry filename.gen" -q
//    frams -Q -s -icliutils.ini "ex standard-eval"  "eval settings.sim filename.gen" -q
//    frams -Q -s -icliutils.ini htmlize -q <somegenotype
//    frams -Q -s -icliutils.ini htmlizeShort -q <somegenotype
//    frams -Q -s -icliutils.ini pjnc -q <somegenotype
//    frams -Q -s -icliutils.ini "getsimplest 1" -q
//    frams -Q -s -icliutils.ini rnd "crossover filename1 filename2" -q


function init()
{
  CLI.addMacro("ex", 1, "Simulator.expdef=\"$1\";", "set the experiment definition");
  CLI.addMacro("lm", 0, "CLI.listMacros();", "list command-line macros");
  CLI.addMacro("rnd", 0, "Math.seed=(Math.time%100000)*1000;", "initialize random seed from current time");
  CLI.addMacro("rnd", 1, "Math.seed=$1;", "initialize random seed from the numeric argument");
  CLI.addMacro("makef0", 0, "makef0FromStdin();", "read genotype from stdin, convert to f0. Print nothing when cannot convert.");
  CLI.addMacro("mut", 0, "mutateFromStdin();", "read genotype from stdin, then mutate");
  CLI.addMacro("simil", 1, "Simulator.import(\"$1\",2); calcSimilarityMatrix();", "read genotypes from file, calculate similarity matrix");
  CLI.addMacro("diversity", 1, "Simulator.import(\"$1\",2); calcDiversity();", "read genotypes from file, calculate diversity of each genotype (actually similarity to all others)");
  CLI.addMacro("symmetry", 1, "Simulator.import(\"$1\",2); calcSymmetry();", "read genotypes from file, calculate planar symmetry of a model made from each genotype");
  CLI.addMacro("eval", 2, "Simulator.import(\"$1\",4+2); Simulator.import(\"$2\",2+4); Simulator.init(); Simulator.start(); while (Simulator.running) Simulator.step();", "evaluate genotypes and save results to a file. Use .sim file compatible with standard-eval.expdef.");
  CLI.addMacro("htmlize", 0, "CLI.println(GenMan.toHTML(CLI.stdin.readUntilEOF()));", "print a genotype in HTML, using colors");
  CLI.addMacro("htmlizeShort", 0, "CLI.println(GenMan.toHTMLshort(CLI.stdin.readUntilEOF()));", "print a genotype (shortened if needed) in HTML, using colors");
  CLI.addMacro("pjnc", 0, "CLI.println(PJNCfromStdin());", "determine number of parts, joints, neurons, and neural connections for a genotype (read from stdin)");
  CLI.addMacro("getsimplest", 1, "CLI.println(GenMan.getSimplest($1).genotype);", "print the simplest genotype in the encoding given");
  CLI.addMacro("crossover", 2, "crossOver(\"$1\",\"$2\");", "crossover two genotypes (each in one file; files should contain just raw genotypes).");
}



function makef0FromStdin()
{
  var g = CLI.stdin.readUntilEOF();
  var og = Geno.newFromString(g);
  if (og.isValid)
    CLI.print("//0\n" + og.f0genotype);
}

function mutateFromStdin()
{
  var g = CLI.stdin.readUntilEOF();
  CLI.print(GenMan.mutate(Geno.newFromString(g)).genotype);
}

function calcSimilarityMatrix()
{
  var i, j, t;
  t = "";
  for (i = 0;i < GenePool.size;i++)
    t += "\t" + GenePool.get(i).name;
  CLI.println(t);
  for (i = 0;i < GenePool.size;i++)
  {
    t = GenePool.get(i).name;
    for (j = 0;j < GenePool.size;j++)
    {
      t += "\t" + Similarity.evaluateDistance(GenePool.get(i).geno,
                                          GenePool.get(j).geno);
    }
    CLI.println(t);
  }
}

function calcDiversity()
{
  var i, j, t;
  for (i = 0;i < GenePool.size;i++)
  {
    t = 0.0;
    for (j = 0;j < GenePool.size;j++)
      t += Similarity.evaluateDistance(GenePool[i].geno, GenePool[j].geno);
    CLI.println(t);
  }
}

function calcSymmetry()
{
  var detail=100.0; //increase to get a more thorough search for the similarity plane (note however that sym(Alpha/Beta/Pos)Steps fields are limited anyway). Decrease for faster evaluation.
  var i;
  for (i = 0;i < GenePool.size;i++)
  {
	  var model=GenePool[i].getModel();
  //time complexity of Symmetry.calculateSymmetry is O(alphaSteps*betaSteps*posSteps * sticks^2*log(sticks))
  var sticks=model.numjoints;
  
  /* now adjust parameters to find the symmetry plane
  1. stepsAlpha = stepsBeta
  2. stepsAlpha >= 2
  3. posSteps >= 2
  angles are probably more important than posSteps, but hard to say how much (2, 3 times?) 
  so let's divide angles by sqrt(sticks), and pos by sticks. log(sticks) in time complexity stays not depreciated */
  Symmetry.symAlphaSteps=Math.max(2.0,detail*2/Math.sqrt(sticks));
  Symmetry.symBetaSteps=Symmetry.symAlphaSteps;
  Symmetry.symPosSteps=Math.max(2,detail/sticks);
  
  //calculate
  var sym=Symmetry.calculateSymmetry(model);
  Simulator.print(" "+sym+" "+Symmetry.symAlphaSteps+" "+Symmetry.symBetaSteps+" "+Symmetry.symPosSteps+" "+model.geno.name);
  }
}

function PJNCfromStdin()
{
  var g = CLI.stdin.readUntilEOF();
  var o = Geno.newFromString(g);
  if (!o.isValid)
    return "invalid_genotype";
  var o2 = GenePool.addGeno(o);
  return "" + (0 + o2.strsiz) + " " + (0 + o2.strjoints) + " " + (0 + o2.nnsiz) + " " + (0 + o2.nncon);
}

function crossOver(file1,file2)
{
   var f;
	f=File.open(file1);
	var g1=f.readUntilEOF();
	f.close();
	f=File.open(file2);
	var g2=f.readUntilEOF();
	f.close();
   CLI.println(GenMan.crossOver(Geno.newFromString(g1),Geno.newFromString(g2)).genotype);
}

//converts all genotypes to the f0 format (useful because interpretation of genotypes in some formats (f2,f3,f7) depends on active neurons, their properties, properties of parts/joints etc.). f0 genototypes are independent from these settings. 
function allToF0() //no macro defined for this, this source just for reference
{
  var i;
  for (i = 0;i < GenePool.size;i++)
  {
	  GenePool[i].name="[f"+(GenePool[i].geno.format-48)+"] "+GenePool[i].name;
	  GenePool[i].genotype=GenePool[i].f0genotype;
  }
}

