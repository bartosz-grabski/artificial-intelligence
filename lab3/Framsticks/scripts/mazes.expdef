expdef:
name:Mazes
info:~
This experiment definition can be used to evaluate (and evolve)
creatures moving between two specified points in a maze. These points
are indicated by start and target marks (in the second population).

Genotype's user1 field (which acts as a maximized fitness) contains
- energy left (when target found during lifespan)
- distance to the target (as a negative value) 
  when a creature died away from the target.

Press "SHIFT" and click the right mouse button to manually set
the start and finish points.

Use maze[1,2].sim settings for this experiment definition.
~
code:~

//by MacKo, 2004-2005

//todo:
//food-creature collisions
//random start/finish points

global startx, starty, targetx, targety; //start and target points in a maze

function onExpDefLoad()
{
  // define genotype and creature groups
  GenePools.clear();
  Populations.clear();
  GenePool.name = "Genotypes";
  update_fitformula();
  Population.name = "Creatures";
  Population.nnsim = 1;
  Population.enableperf = 1;
  Population.death = 1;
  Population.energy = 1; 
  Population.perfperiod = 5; //test location (onUpdate) each 5 simulation steps
  Population.colmask = 0;
  Populations.addGroup("Food");
  Population.nnsim = 0;
  Population.enableperf = 0;
  Population.death = 1;
  Population.energy = 1; 
  Population.colmask = 0;

  ExpParams.initialgen = "X";
  ExpParams.capacity = 200;
  ExpParams.delrule = 0;
  ExpParams.MaxCreated = 1;
  ExpParams.p_nop = 1;
  ExpParams.p_mut = 0;
  ExpParams.p_xov = 0;
  ExpParams.xov_mins = 0;
  ExpParams.selrule = 2;
  ExpParams.cr_c = 0;
  ExpParams.cr_life = 0;
  ExpParams.cr_v = 1;
  ExpParams.cr_gl = 0;
  ExpParams.cr_joints = 0;
  ExpParams.cr_nnsiz = 0;
  ExpParams.cr_nncon = 0;
  ExpParams.cr_di = 0;
  ExpParams.cr_vpos = 0;
  ExpParams.cr_vvel = 0;
  ExpParams.cr_norm = 0;
  ExpParams.cr_simi = 0;
  ExpParams.Energy0 = 1000;
  ExpParams.e_meta = 0.01; //life span: 100 000 steps
  ExpParams.feed = 0;
  ExpParams.feede0 = 200;
  ExpParams.feedtrans = 1;
  ExpParams.placement = 0;
  ExpParams.creath = 0.1;
  ExpParams.foodgen = "";
  ExpState.totaltestedcr = 0;

  ExpParams.targetradius = 2;
  ExpParams.startxlist = "";
  ExpParams.startylist = "";
  ExpParams.startheadings = "";
  ExpParams.targetxlist = "";
  ExpParams.targetylist = "";
}

function onExpInit()
{
  Populations.clearGroup(0);
  Populations.clearGroup(1);
  GenePools.clearGroup(0);
  GenePools.newGenotype(ExpParams.initialgen);
  GenePools.copySelected(0);
  ExpState.totaltestedcr = 0;
  addmark(0);
  addmark(1); //ensure there are two marks
  startx = starty = 3.0; //temp
  targetx = targety = 6.0; //temp
  updateMarks();
}

function world_pos(map_pos, mapsize) //converts map-based position (center of the field) into absolute world coordinate
{
  return (1.5 + map_pos) / (2.0 + mapsize - 4.0)*World.wrldsiz;
}

function placement()
{
  //select one of the provided locations, each in turn, based on ExpState.totaltestedcr

  var xx = String.split(ExpParams.startxlist, ",");
  var yy = String.split(ExpParams.startylist, ",");
  //WAITING FOR SZYMON - todo: split("") returns 1 element
  if (xx.size == 0)
  {
    Simulator.message("Starting positions not defined!", 2);
    return ;
  }
  if (xx.size != yy.size)
    Simulator.message("The number of start X positions differs from the number of Y positions!", 2);
  startx = xx[ExpState.totaltestedcr % xx.size];
  starty = yy[ExpState.totaltestedcr % xx.size];
  startx = world_pos(0.0 + startx, WorldMap.xsize);  //'0.0+' converts any strange values, like null or "", to 0.0, and ints to floats
  starty = world_pos(0.0 + starty, WorldMap.ysize);
  var z = WorldMap.getHeight(startx, starty);
  if (z > 0)
    Simulator.message("The " + (ExpState.totaltestedcr % xx.size) + "th starting position elevated over the zero level: " + z, 1);
  if (World.wrldwat > z) // water here!
  {
    if (ExpParams.creath > 0)
      z = World.wrldwat + ExpParams.creath;
    else
      z = (1.0 + ExpParams.creath) * World.wrldwat - z * ExpParams.creath;
  }
  else                 // land area
  {
    if (ExpParams.creath > 0)
      z += ExpParams.creath;
  }

  Creature.moveAbs(startx - Creature.size_x / 2, starty - Creature.size_y / 2, z - 0.999);

  //rotate to follow the provided (or not) heading
  xx = String.split(ExpParams.startheadings, ",");
  Creature.rotate(0, 0, (0.0 + xx[ExpState.totaltestedcr % xx.size]) / 180.0*Math.pi);

  //now set the target mark position
  xx = String.split(ExpParams.targetxlist, ",");
  yy = String.split(ExpParams.targetylist, ",");

  if (xx.size == 0)
  {
    Simulator.message("Target positions not defined!", 2);
    return ;
  }
  if (xx.size != yy.size)
    Simulator.message("The number of target X positions differs from the number of Y positions!", 2);
  targetx = xx[ExpState.totaltestedcr % xx.size];
  targety = yy[ExpState.totaltestedcr % xx.size];
  targetx = world_pos(0.0 + targetx, WorldMap.xsize);  //'0.0+' converts any strange values, like null or "", to 0.0, and ints to floats
  targety = world_pos(0.0 + targety, WorldMap.ysize);

  updateMarks();
}

function onBorn()
{
  if (Populations.group == 0)
  { // creature
    placement(); //collisions not handled!
    if (Populations.creatBBCollisions(0))
      Simulator.message("onBorn() could not avoid collisions.", 2);
    var n=Creature.numjoints;
    if (n==0) n=Creature.numparts; //creatures with only one Part will live just as long as one-stick creatures
    Creature.idleen = ExpParams.e_meta * n;
    Creature.energ0 = Creature.energ0 * ExpParams.Energy0 * n;
    Creature.energy = Creature.energ0;
  }
  else
  {
    if (String.indexOf(Creature.genotype, "#start") >= 0)
    {
      Creature.name = "Start";
      Creature.user1 = 1; //user1 - can also be used for smelling start or target
    }
    else if (String.indexOf(Creature.genotype, "#target") >= 0)
    {
      Creature.name = "Target";
      Creature.user1 = 2;
    }
    else
      Creature.name = "Food";
    Creature.moveAbs(Math.rnd01*World.wrldsiz - Creature.size_x / 2, Math.rnd01*World.wrldsiz / 2 - Creature.size_y / 2, 4);
    Creature.idleen = 0;
    Creature.energ0 = ExpParams.feede0;
    Creature.energy = Creature.energ0;
  }
}

function distanceToTarget(cr)
{
  return Math.sqrt( (cr.center_x - targetx) * (cr.center_x - targetx) +
                    (cr.center_y - targety) * (cr.center_y - targety) );
}

function onCreaturesUpdate(cr)
{
  //"kill" a creature when it is close enough to the target (=mission completed)
  var dist = distanceToTarget(cr);
  if (dist < ExpParams.targetradius)
  {
    cr.user1 = cr.energy / cr.numjoints; //how much energy left (the more, the better)
    // Simulator.message("Target found, distance="+dist+", energy level="+cr.user1,0);
    cr.energy = 0; //shall die
  }
}

function addfood()
{
  Populations.group = 1;
  if (ExpParams.foodgen == "")
    Populations.createFromString("//0\nm:Vstyle=food\np:");
  else
    Populations.createFromString(ExpParams.foodgen);
}

function addmark(finish)
{
  var i;
  for (i = 0;i < Populations.get(1).size;i++)
    if (Populations.get(1).get(i).user1 == finish + 1)
      return ; //already exists! no need to add.
  var color, type;
  if (finish == 0)
    color = "0xffffff";
  else
    color = "0x00ff00";
  if (finish == 0)
    type = "#start";
  else
    type = "#target"; //cludge to distinguish start/target from food
  Populations.group = 1;
  Populations.createFromString("//0\n" + type + "\nm:Vstyle=mark(color=" + color + ")\np:");
}

function updateMarks()
{
  var i, c, s = 0, t = 0;
  for (i = 0;i < Populations.get(1).size;i++)
  {
    c = Populations.get(1).get(i);
    if (c.user1 == 1)
      c.moveAbs(startx - c.size_x / 2, starty - c.size_y / 2, c.pos_z);
    if (c.user1 == 2)
      c.moveAbs(targetx - c.size_x / 2, targety - c.size_y / 2, c.pos_z);
  }
}

function onStep()
{
  Populations.group = 0; // creatures
  if (Population.size < ExpParams.MaxCreated)
  {
    selectGenotype();
    if (Genotype.isValid)
      Populations.createFromGenotype();
    else
      Simulator.print("invalid genotype - ignored: " + Genotype.info);
  }

  if (ExpParams.aging > 0)
  {
    var i = 0;
    while (i < Population.size)
    {
      Populations.creature = i;
      Creature.idleen = ExpParams.e_meta * Creature.numjoints * Math.exp((0.6931471806 * Creature.lifespan) / ExpParams.aging);
      i++;
    }
  }

  Populations.group = 1; // food
  if (Population.size < ExpParams.feed)
    addfood();
}

function updatePerformanceWithPopSize()
{
  GenePools.genotype = GenePools.findGenotypeForCreature();
  if (GenePools.genotype < 0) // not found in gene pool
  {
    GenePools.getFromCreature();
    Genotype.num = 0; // 0 = it will be filled automatically
    GenePools.copySelected(0);
    Genotype.popsiz = 0;
  }
  if (typeof(Creature.user1) == typeof(null))
    Creature.user1 = -distanceToTarget(Creature.*); //died because all energy consumed
  if (Genotype.popsiz == 0)
    Genotype.user1 = Creature.user1;
  else
    Genotype.user1 = ((Genotype.user1 * Genotype.popsiz) + Creature.user1 + 0.0) / (Genotype.popsiz + 1.0); //average
  GenePools.addPerformanceFromCreature();
}

function onDied()
{
  if (Populations.group != 0)
    return ; // ignore food
  ExpState.totaltestedcr++;
  updatePerformanceWithPopSize();
  LimitGenePool();
  Simulator.checkpoint();
}

@include "standard_select.inc"

function selectGenotype()
{
  var sel;
  sel = (ExpParams.p_nop + ExpParams.p_mut + ExpParams.p_xov) * Math.rnd01;
  if (sel < ExpParams.p_nop)
    GenePools.genotype = selectedForCreation();
  else
  {
    sel = sel - ExpParams.p_nop;
    if (sel < ExpParams.p_mut)
    {
      GenePools.genotype = selectedForCreation();
      GenePools.mutateSelected();
    }
    else
    {
      var other;
      GenePools.genotype = selectedForCreation();
      if (ExpParams.xov_mins > 0.0)
        other = selectedSimilar();
      else
        other = selectedForCreation();
      if (other >= 0)
        GenePools.crossoverSelected(other);
      else
        Simulator.print("crossover - second genotype not found?");
    }
  }
}

function onFoodCollision() //needs updating, currently *all* collisions are ignored
{
  var e = Collision.Part2.ing * ExpParams.feedtrans;
  //Simulator.print("transferring "+e+" from "+Collision.Creature1.name+" to "+Collision.Creature2.name);
  Collision.Creature1.energy_m = Collision.Creature1.energy_m + e;
  Collision.Creature2.energy_p = Collision.Creature2.energy_p + e;
}

function ExpParams_cleardata_call()
{
  var i;
  GenePools.group = 0;
  for (i = 0;i < GenePool.size;i++)
  {
    GenePools.genotype = i;
    Genotype.popsiz = 0;
  }
  Simulator.print("Performance data reset.");
}

function LimitGenePool()
{
  if (GenePool.totalpop > (ExpParams.capacity + 1))
    Simulator.print("Removing " + (GenePool.totalpop - ExpParams.capacity) + " genotypes");
  while (GenePool.totalpop > ExpParams.capacity)
    GenePools.deleteOne(selectedForDeletion());
}

function ExpParams_capacity_set()
{
  LimitGenePool();
}

function
ExpParams_cr_c_set, ExpParams_cr_life_set, ExpParams_cr_v_set, ExpParams_cr_gl_set,
ExpParams_cr_joints_set, ExpParams_cr_nnsiz_set, ExpParams_cr_nncon_set, ExpParams_cr_di_set,
ExpParams_cr_vpos_set, ExpParams_cr_vvel_set, ExpParams_cr_norm_set, ExpParams_cr_simi_set,
update_fitformula()
{
  var formula = "" + ExpParams.cr_c;
  formula += singlecrit("cr_life", "lifespan");
  formula += singlecrit("cr_v", "velocity");
  formula += singlecrit("cr_gl", "strsiz");
  formula += singlecrit("cr_joints", "strjoints");
  formula += singlecrit("cr_nnsiz", "nnsiz");
  formula += singlecrit("cr_nncon", "nncon");
  formula += singlecrit("cr_di", "distance");
  formula += singlecrit("cr_vpos", "vertpos");
  formula += singlecrit("cr_vvel", "vertvel");
  if (ExpParams.cr_simi)
    formula = "(" + formula + ")*this.simi";
  GenePool.fitness = "return " + formula + ";";
}

function singlecrit(crname, fieldname)
{
  var weight = ExpParams.[crname];
  if (weight == 0.0)
    return "";
  if (ExpParams.cr_norm)
    return "+this.getNormalized(Genotype:" + fieldname + ")*" + weight;
  else
    return "+this." + fieldname + "*" + weight;
}

function queryEventNames()
{
  return ["Mark start point", "Mark target", "Place food", "Drop food"];
}

function onUserEvent(type, point, vector)
{
  //Simulator.print("called event #"+type);
  var p = WorldMap.intersect(point, vector);
  if (p)
  {
    //	Simulator.print("intersection found:"+p[0]+","+p[1]+","+p[2]);
    if (type == 0)
    {
      addmark(0);
      startx = p[0] - Creature.size_x / 2;
      starty = p[1] - Creature.size_y / 2;
      updateMarks();
    }
    if (type == 1)
    {
      addmark(1);
      targetx = p[0] - Creature.size_x / 2;
      targety = p[1] - Creature.size_y / 2;
      updateMarks();
    }
    if (type == 2 || type == 3)
    {
      addfood();
      var z = p[2];
      if (type == 3)
        z += 10;
      Creature.moveAbs(p[0] - Creature.size_x / 2, p[1] - Creature.size_y / 2, z);
    }
  }
  //else
  //	Simulator.print("no intersection...");
}

@include "standard_loadsave.inc"

~

#include "standard_props.inc"


prop:
id:startxlist
name:Start X positions
help:A comma-separated list of X positions (based on the world map) of starting points
type:s

prop:
id:startylist
name:Start Y positions
help:A comma-separated list of Y positions (based on the world map) of starting points
type:s

prop:
id:startheadings
name:Start headings
help:A comma-separated list of initial headings (in degrees)
type:s

prop:
id:targetxlist
name:Target X positions
help:A comma-separated list of X positions (based on the world map) of target points
type:s

prop:
id:targetylist
name:Target Y positions
help:A comma-separated list of Y positions (based on the world map) of target points
type:s

prop:
id:targetradius
name:Target radius
help:The target is a circle with the radius defined here
type:f 0.01 10

prop:
id:cleardata
name:Clear performance info
type:p
help:~
Sets the number of instances of each genotype to zero (as if it has never been evaluated).
Genotype performance values stay intact, yet they are meaningless if a genotype has no instances.~

state:
id:notes
name:Notes
type:s 1
help:~
You can write anything here
(it will be saved to the experiment file)~

state:
id:totaltestedcr
name:Evaluated creatures
help:Total number of the creatures evaluated in the experiment
type:d
flags:16

state:
id:creaturesgrouploaded
name:creaturesgrouploaded
type:d
flags:34
